{"ast":null,"code":"import { useRef, useState } from 'react';\nimport useMemoizedFn from '../useMemoizedFn';\nimport { isNumber } from '../utils';\nconst dumpIndex = (step, arr) => {\n  let index = step > 0 ? step - 1 // move forward\n  : arr.length + step; // move backward\n  if (index >= arr.length - 1) {\n    index = arr.length - 1;\n  }\n  if (index < 0) {\n    index = 0;\n  }\n  return index;\n};\nconst split = (step, targetArr) => {\n  const index = dumpIndex(step, targetArr);\n  return {\n    _current: targetArr[index],\n    _before: targetArr.slice(0, index),\n    _after: targetArr.slice(index + 1)\n  };\n};\nexport default function useHistoryTravel(initialValue) {\n  let maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const [history, setHistory] = useState({\n    present: initialValue,\n    past: [],\n    future: []\n  });\n  const {\n    present,\n    past,\n    future\n  } = history;\n  const initialValueRef = useRef(initialValue);\n  const reset = function () {\n    const _initial = arguments.length > 0 ? arguments.length <= 0 ? undefined : arguments[0] : initialValueRef.current;\n    initialValueRef.current = _initial;\n    setHistory({\n      present: _initial,\n      future: [],\n      past: []\n    });\n  };\n  const updateValue = val => {\n    const _past = [...past, present];\n    const maxLengthNum = isNumber(maxLength) ? maxLength : Number(maxLength);\n    // maximum number of records exceeded\n    if (maxLengthNum > 0 && _past.length > maxLengthNum) {\n      //delete first\n      _past.splice(0, 1);\n    }\n    setHistory({\n      present: val,\n      future: [],\n      past: _past\n    });\n  };\n  const _forward = function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    if (future.length === 0) {\n      return;\n    }\n    const {\n      _before,\n      _current,\n      _after\n    } = split(step, future);\n    setHistory({\n      past: [...past, present, ..._before],\n      present: _current,\n      future: _after\n    });\n  };\n  const _backward = function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n    if (past.length === 0) {\n      return;\n    }\n    const {\n      _before,\n      _current,\n      _after\n    } = split(step, past);\n    setHistory({\n      past: _before,\n      present: _current,\n      future: [..._after, present, ...future]\n    });\n  };\n  const go = step => {\n    const stepNum = isNumber(step) ? step : Number(step);\n    if (stepNum === 0) {\n      return;\n    }\n    if (stepNum > 0) {\n      return _forward(stepNum);\n    }\n    _backward(stepNum);\n  };\n  return {\n    value: present,\n    backLength: past.length,\n    forwardLength: future.length,\n    setValue: useMemoizedFn(updateValue),\n    go: useMemoizedFn(go),\n    back: useMemoizedFn(() => {\n      go(-1);\n    }),\n    forward: useMemoizedFn(() => {\n      go(1);\n    }),\n    reset: useMemoizedFn(reset)\n  };\n}","map":{"version":3,"names":["useRef","useState","useMemoizedFn","isNumber","dumpIndex","step","arr","index","length","split","targetArr","_current","_before","slice","_after","useHistoryTravel","initialValue","maxLength","arguments","undefined","history","setHistory","present","past","future","initialValueRef","reset","_initial","current","updateValue","val","_past","maxLengthNum","Number","splice","_forward","_backward","go","stepNum","value","backLength","forwardLength","setValue","back","forward"],"sources":["/Users/mac/Documents/store/my-app/node_modules/ahooks/es/useHistoryTravel/index.js"],"sourcesContent":["import { useRef, useState } from 'react';\nimport useMemoizedFn from '../useMemoizedFn';\nimport { isNumber } from '../utils';\nconst dumpIndex = (step, arr) => {\n  let index = step > 0 ? step - 1 // move forward\n  : arr.length + step; // move backward\n  if (index >= arr.length - 1) {\n    index = arr.length - 1;\n  }\n  if (index < 0) {\n    index = 0;\n  }\n  return index;\n};\nconst split = (step, targetArr) => {\n  const index = dumpIndex(step, targetArr);\n  return {\n    _current: targetArr[index],\n    _before: targetArr.slice(0, index),\n    _after: targetArr.slice(index + 1)\n  };\n};\nexport default function useHistoryTravel(initialValue, maxLength = 0) {\n  const [history, setHistory] = useState({\n    present: initialValue,\n    past: [],\n    future: []\n  });\n  const {\n    present,\n    past,\n    future\n  } = history;\n  const initialValueRef = useRef(initialValue);\n  const reset = (...params) => {\n    const _initial = params.length > 0 ? params[0] : initialValueRef.current;\n    initialValueRef.current = _initial;\n    setHistory({\n      present: _initial,\n      future: [],\n      past: []\n    });\n  };\n  const updateValue = val => {\n    const _past = [...past, present];\n    const maxLengthNum = isNumber(maxLength) ? maxLength : Number(maxLength);\n    // maximum number of records exceeded\n    if (maxLengthNum > 0 && _past.length > maxLengthNum) {\n      //delete first\n      _past.splice(0, 1);\n    }\n    setHistory({\n      present: val,\n      future: [],\n      past: _past\n    });\n  };\n  const _forward = (step = 1) => {\n    if (future.length === 0) {\n      return;\n    }\n    const {\n      _before,\n      _current,\n      _after\n    } = split(step, future);\n    setHistory({\n      past: [...past, present, ..._before],\n      present: _current,\n      future: _after\n    });\n  };\n  const _backward = (step = -1) => {\n    if (past.length === 0) {\n      return;\n    }\n    const {\n      _before,\n      _current,\n      _after\n    } = split(step, past);\n    setHistory({\n      past: _before,\n      present: _current,\n      future: [..._after, present, ...future]\n    });\n  };\n  const go = step => {\n    const stepNum = isNumber(step) ? step : Number(step);\n    if (stepNum === 0) {\n      return;\n    }\n    if (stepNum > 0) {\n      return _forward(stepNum);\n    }\n    _backward(stepNum);\n  };\n  return {\n    value: present,\n    backLength: past.length,\n    forwardLength: future.length,\n    setValue: useMemoizedFn(updateValue),\n    go: useMemoizedFn(go),\n    back: useMemoizedFn(() => {\n      go(-1);\n    }),\n    forward: useMemoizedFn(() => {\n      go(1);\n    }),\n    reset: useMemoizedFn(reset)\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}